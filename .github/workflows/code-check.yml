name: "Golang code checks"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GO_VERSIONS: "['1.18.1', '1.18', '1.19', '1.20', '1.21', '1.22']"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      GO_VERSIONS: ${{env.GO_VERSIONS}}
    steps:
      - name: Compute outputs
        run: |
          echo "GO_VERSIONS=${{ env.GO_VERSIONS }}" >> "$GITHUB_OUTPUT"

  merge-gatekeeper:
    name: Mergeability
    runs-on: ubuntu-latest
    permissions:
      checks: read
      statuses: read
    steps:
      - name: Run Merge Gatekeeper
        uses: upsidr/merge-gatekeeper@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          self: Mergeability


  test:
    name: run tests
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        go-version: ${{ fromJson(needs.prepare.outputs.GO_VERSIONS) }}

    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Test with Go
        run: go test -json > TestResults-${{ matrix.go-version }}.json
      - name: Upload Go test results
        uses: actions/upload-artifact@v4
        with:
          name: Go-results-${{ matrix.go-version }}
          path: TestResults-${{ matrix.go-version }}.json


  format:
    name: format go files
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        go-version: ${{ fromJson(needs.prepare.outputs.GO_VERSIONS) }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Format
        run: gofmt -l -d -s .
  lint:
    name: lint go files
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        go-version: ${{ fromJson(needs.prepare.outputs.GO_VERSIONS) }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          args: --config ./.golangci.yaml
          version: latest
  build:
    needs: prepare
    strategy:
      matrix:
        package: [rest, grpc/server]
        go-version: ${{ fromJson(needs.prepare.outputs.GO_VERSIONS) }}
    name: build go binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Build binary
        run: go build -o ./build/${{ matrix.package }} ./cmd/${{ matrix.package }}
