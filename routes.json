{
  "router": {
    "middlewares": [
      {
        "pkg": "github.com/go-chi/chi/v5/middleware",
        "func": "RequestID",
        "comment": "RequestID is a middleware that injects a request ID into the context of each\nrequest. A request ID is a string of the form \"host.example.com/random-0001\",\nwhere \"random\" is a base62 random string that uniquely identifies this go\nprocess, and where the last number is an atomically incremented request\ncounter.\n",
        "file": "/Users/cameronbrill/go-workspace/pkg/mod/github.com/go-chi/chi/v5@v5.0.10/middleware/request_id.go",
        "line": 67
      },
      {
        "pkg": "github.com/go-chi/chi/v5/middleware",
        "func": "RealIP",
        "comment": "RealIP is a middleware that sets a http.Request's RemoteAddr to the results\nof parsing either the True-Client-IP, X-Real-IP or the X-Forwarded-For headers\n(in that order).\n\nThis middleware should be inserted fairly early in the middleware stack to\nensure that subsequent layers (e.g., request loggers) which examine the\nRemoteAddr will see the intended value.\n\nYou should only use this middleware if you can trust the headers passed to\nyou (in particular, the two headers this middleware uses), for example\nbecause you have placed a reverse proxy like HAProxy or nginx in front of\nchi. If your reverse proxies are configured to pass along arbitrary header\nvalues from the client, or if you use this middleware without a reverse\nproxy, malicious clients will be able to make you very sad (or, depending on\nhow you're using RemoteAddr, vulnerable to an attack of some sort).\n",
        "file": "/Users/cameronbrill/go-workspace/pkg/mod/github.com/go-chi/chi/v5@v5.0.10/middleware/realip.go",
        "line": 31
      },
      {
        "pkg": "github.com/go-chi/chi/v5/middleware",
        "func": "Logger",
        "comment": "Logger is a middleware that logs the start and end of each request, along\nwith some useful data about what was requested, what the response status was,\nand how long it took to return. When standard output is a TTY, Logger will\nprint in color, otherwise it will print in black and white. Logger prints a\nrequest ID if one is provided.\n\nAlternatively, look at https://github.com/goware/httplog for a more in-depth\nhttp logger with structured logging support.\n\nIMPORTANT NOTE: Logger should go before any other middleware that may change\nthe response, such as middleware.Recoverer. Example:\n    r := chi.NewRouter()\n    r.Use(middleware.Logger)        // \u003c--\u003c\u003c Logger should come before Recoverer\n    r.Use(middleware.Recoverer)\n    r.Get(\"/\", handler)\n",
        "file": "/Users/cameronbrill/go-workspace/pkg/mod/github.com/go-chi/chi/v5@v5.0.10/middleware/logger.go",
        "line": 38
      },
      {
        "pkg": "github.com/go-chi/chi/v5/middleware",
        "func": "Recoverer",
        "comment": "Recoverer is a middleware that recovers from panics, logs the panic (and a\nbacktrace), and returns a HTTP 500 (Internal Server Error) status if\npossible. Recoverer prints a request ID if one is provided.\n\nAlternatively, look at https://github.com/go-chi/httplog middleware pkgs.\n",
        "file": "/Users/cameronbrill/go-workspace/pkg/mod/github.com/go-chi/chi/v5@v5.0.10/middleware/recoverer.go",
        "line": 22
      },
      {
        "pkg": "github.com/",
        "func": "o-chi/cors.(*Cors).Handler-fm",
        "comment": "",
        "file": "\u003cautogenerated\u003e",
        "line": 1
      }
    ],
    "routes": {
      "/link/*": {
        "router": {
          "middlewares": [
            {
              "pkg": "github.com/cameronbrill/brill-wtf-go/rest",
              "func": "linkCtx",
              "comment": "",
              "file": "/Users/cameronbrill/Projects/personal/brill.wtf/brill.wtf.go/rest/context.go",
              "line": 11
            }
          ],
          "routes": {
            "/": {
              "handlers": {
                "GET": {
                  "middlewares": [],
                  "method": "GET",
                  "pkg": "github.com/",
                  "func": "ameronbrill/brill-wtf-go/rest/controller.LinkServiceController.ShortURLToLink-fm",
                  "comment": "",
                  "file": "\u003cautogenerated\u003e",
                  "line": 1
                },
                "POST": {
                  "middlewares": [],
                  "method": "POST",
                  "pkg": "github.com/",
                  "func": "ameronbrill/brill-wtf-go/rest/controller.LinkServiceController.NewLink-fm",
                  "comment": "",
                  "file": "\u003cautogenerated\u003e",
                  "line": 1
                }
              }
            },
            "/{slug}": {
              "handlers": {
                "GET": {
                  "middlewares": [],
                  "method": "GET",
                  "pkg": "github.com/",
                  "func": "ameronbrill/brill-wtf-go/rest/controller.LinkServiceController.ShortURLToLink-fm",
                  "comment": "",
                  "file": "\u003cautogenerated\u003e",
                  "line": 1
                }
              }
            }
          }
        }
      }
    }
  }
}